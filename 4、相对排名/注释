一、算法思想：
    1、涉及到一种排序算法，选择一种排序算法对运动员得分进行排序，然后选取前三名分别设为金银铜三种奖牌，其余的输出4,5
    2、排序算法：冒泡排序、选择排序

一、方案二所用的结构：
    class MyClass:
        def reverseInteger(self, number):
            # 使用self访问类的实例属性和方法
            self.number = number
            # 执行其他操作...

    # 创建类的实例
    my_obj = MyClass()
    # 调用reverseInteger方法，实例对象会通过self参数自动传入
    my_obj.reverseInteger(123)

    1.1 在Python中，self 是一个约定俗成的用法，用于表示类的实例自身，作为第一个参数出现在类的方法定义中。使用 self 可以访问和操作类的属性和方法
    1.2 reverseInteger函数作为MyClass的一个方法
        class Solution:
            def reverseInteger(self, number):
                h = int(number/100)
                t = int(number%100/10)
                z = int(number%10)
                return (100*z+10*t+h)
        #主函数
        if __name__  ==  '__main__' :
            solution = Solution()
            num = 123
            ans = solution.reverseInteger(num)
            print("输入:", num)
            print("输出：", ans)

        因此在本代码中solution是Solution类的一个实例，调用reverseInteger方法

二、方案二中算法的知识点
     h = int(number/100)
     t = int(number%100/10)
     z = int(number%10)
    对于t=int((number%10)/10)就是number除以100的余数,再除以 10 获得的整数。
    假设 num = 245, 那么 num % 100 = 45
    (num % 100) / 10 = 45 / 10 = 4

三、方案一中的知识点
    3.1 reversed_str = str(num)[::-1]
        str(num)[::-1] 是一个Python的切片操作，它用于翻转一个字符串。
        这里的 str(num) 表达式将整数 num 转换为字符串，然后通过切片操作 [::-1] 对字符串进行翻转。
        切片操作 [start:end:step] 的基本语法如下：
            start：切片的起始位置，默认为0（表示字符串的开头）。
            end：切片的结束位置（不包括该位置），默认为字符串的长度（表示字符串的结尾）。
            step：切片的步长，默认为1。
        在 [::-1] 中，start 和 end 均未指定，因此切片的默认值是整个字符串。步长 -1 表示从后向前遍历字符串，实现字符串的翻转效果。